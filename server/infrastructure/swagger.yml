swagger: "2.0"
info:
  version: "1.0"
  title: "TicTacToe"
  description: "My take on TicTacToe written in React calling a backend API service"
schemes:
- "https"

paths:
  /:
    get:
      responses:
        200:
          description: "TicTacToe HTML web page containing the TicTacToe API usage information"
          headers:
            Content-Type:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Content-Type: "'text/html'"
            responseTemplates:
              text/html: "<html>\n    <head>\n        <style>\n        body {\n  \
                \          color: #333;\n            font-family: Sans-serif;\n  \
                \          max-width: 800px;\n            margin: auto;\n        }\n\
                \        </style>\n    </head>\n    <body>\n        <h1>Welcome to my take on TicTacTow\
                \ written in React calling a backend API service</h1>\n        <p>\n            Welcome.        </p>\n\
                \    </body>\n</html>"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"

  /api/info/{user}:
    post:
      description: |
        "Keeps a tab of the score"
      produces:
      - "application/json"
      parameters:
      - name: "user"
        in: "path"
        required: true
        schema:
          $ref: "#/definitions/user"
      responses:
        200:
          description: "Returns the current score for this user"
          schema:
            $ref: "#/definitions/User"
        500:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-amazon-apigateway-integration:
        type: "mock"
        responses:
          default:
            statusCode: 200
            responseTemplates:
              application/json: "{name:rommel, wins:0, loss:0}"

definitions:
  Error:
    type: "object"
    required:
    - "code"
    - "message"
    properties:
      code:
        type: "integer"
        format: "int32"
      message:
        type: "string"
      description:
        type: "string"
      attribute_error:
        type: "array"
        items:
          $ref: "#/definitions/ErrorAttribute"

  ErrorAttribute:
    type: "object"
    required:
    - "code"
    - "attribute"
    - "message"
    properties:
      code:
        type: "integer"
        format: "int32"
      attribute:
        type: "string"
      message:
        type: "string"

  User:
    type: "object"
    required:
    - "name"
    - "wins"
    - "loss"
    properties:
      name:
        type: "string"
      wins:
        type: "string"
      loss:
        type: "string"