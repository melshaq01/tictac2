AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: >-
  A simple backend (read/write to DynamoDB) with a RESTful API endpoint using Amazon API Gateway.
Parameters: 
  TableNameParameter: 
    Type: String
Resources:
  tictactoeapiendpoint:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: "api/user/handler.invoke"
      Runtime: "nodejs8.10"
      CodeUri: .
      Description: >-
        "A simple backend (read/write to DynamoDB) with a RESTful API endpoint using Amazon API Gateway."
      MemorySize: 512
      Timeout: 20
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TableNameParameter
      Events:
        Api1:
          Type: "Api"
          Properties:
            Path: "/api/info/{user}"
            Method: "post"

  RoleFuncLeaderBoard:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: "Allow"
          Principal:
            Service:
            - "lambda.amazonaws.com"
          Action:
          - "sts:AssumeRole"
      Path: "/"
      Policies:
      - PolicyName: "Fn"
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Effect: "Allow"
            Action:
            - "logs:CreateLogGroup"
            - "logs:CreateLogStream"
            - "logs:PutLogEvents"
            Resource: "arn:aws:logs:*:*:*"
          - Effect: "Allow"
            Action:
            - "dynamodb:BatchWriteItem"
            - "dynamodb:PutItem"
            - "dynamodb:UpdateItem"
            Resource: !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/userinfo"
          - Effect: "Allow"
            Action:
            - "dynamodb:Get*"
            - "dynamodb:Query"
            Resource: !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/userinfo"

Api:
    Type: "AWS::Serverless::Api"
    Properties:
      StageName: "Production"
      DefinitionUri: "swagger.yml"